<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>nginx - Balise - Guy Evans</title><link>https://guy-evans.com/fr/tags/nginx/</link><description>nginx - Balise - Guy Evans</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>web@evans.fr (Guy Evans)</managingEditor><webMaster>web@evans.fr (Guy Evans)</webMaster><lastBuildDate>Sun, 23 Apr 2023 09:19:19 +0000</lastBuildDate><atom:link href="https://guy-evans.com/fr/tags/nginx/" rel="self" type="application/rss+xml"/><item><title>Découverte de Caddy - un serveur web simple et rapide</title><link>https://guy-evans.com/fr/posts/2023-04-23_a-look-at-caddy-a-simple-and-fast-web-server/</link><pubDate>Sun, 23 Apr 2023 09:19:19 +0000</pubDate><author>Guy Evans</author><guid>https://guy-evans.com/fr/posts/2023-04-23_a-look-at-caddy-a-simple-and-fast-web-server/</guid><description><![CDATA[<div class="featured-image">
                <img src="/fr/posts/2023-04-23_a-look-at-caddy-a-simple-and-fast-web-server/valery-sysoev-p9OkL4yW3C8-unsplash.webp" referrerpolicy="no-referrer">
            </div><p>Nous avons tous utilisé Apache et NGNIX pour héberger un site web et ils sont très bien, mais pour être honnête, je ne me suis jamais vraiment senti à l&rsquo;aise avec leur configuration. Et c&rsquo;est ce qui m&rsquo;a amené à <a href="caddyserver.com/" rel="">Caddy</a>. Découvrons ce que <a href="caddyserver.com/" rel="">Caddy</a> a à offrir.</p>
<h1 id="caddy">Caddy</h1>
<p><a href="caddyserver.com/" rel="">Caddy</a> est un serveur web unique <em>(du moins je le pense)</em> avec un jeu de fonctionnalités modernes. Vous pouvez l&rsquo;utiliser comme <a href="https://caddyserver.com/docs/proxy" target="_blank" rel="noopener noreffer ">reverse proxy et load balancer.</a> <a href="https://caddyserver.com/docs/fastcgi" target="_blank" rel="noopener noreffer ">héberger vos applications PHP avec lui.</a> Et même <a href="https://caddyserver.com/docs/git" target="_blank" rel="noopener noreffer ">déployer votre site</a> avec <code>git push</code>. Et j&rsquo;ai presque oublié l&rsquo;une des meilleures fonctionnalités ; le HTTPS automatique, avec des certificats utilisant des fournisseurs comme <a href="https://letsencrypt.org/" target="_blank" rel="noopener noreffer ">Lets Encrypt</a> et <a href="https://zerossl.com/" target="_blank" rel="noopener noreffer ">ZeroSSL</a>.</p>
<p>Cool, non ?</p>
<figure>
</figure>

<h2 id="installation">Installation</h2>
<p>Caddy est disponible sous la forme d&rsquo;un simple exécutable, d&rsquo;une <a href="https://hub.docker.com/_/caddy" target="_blank" rel="noopener noreffer ">image docker</a> ou, comme d&rsquo;habitude, via un gestionnaire de paquets. Aujourd&rsquo;hui, nous utiliserons Debian. Mais si vous utilisez un autre système d&rsquo;exploitation, leur <a href="https://caddyserver.com/docs/install" target="_blank" rel="noopener noreffer ">documentation</a> devrait vous couvrir.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
</span></span><span class="line"><span class="cl">curl -1sLf <span class="s1">&#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#39;</span> <span class="p">|</span> sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
</span></span><span class="line"><span class="cl">curl -1sLf <span class="s1">&#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#39;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/caddy-stable.list
</span></span><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install caddy
</span></span></code></pre></div><p>Une fois installé, le service s&rsquo;exécutera automatiquement et servira la page de bienvenue par défaut sur le port 80. Caddy peut ensuite être configuré en utilisant le fichier <code>Caddyfile</code> dans <code>/etc/caddy</code></p>
<h2 id="configuration">Configuration</h2>
<p>Comme dit plus haut, caddy peut être configuré en utilisant le fichier <code>Caddyfile</code> écrit en JSON dans <code>/etc/caddy</code>. Dans ce fichier, nous lui donnons des <a href="https://caddyserver.com/docs/caddyfile/directives" target="_blank" rel="noopener noreffer ">directives</a> pour qu&rsquo;il soit soit un reverse proxy, un serveur web, un front php, etc. Caddy peut aussi être configuré en utilisant son <a href="https://caddyserver.com/docs/api" target="_blank" rel="noopener noreffer ">API REST</a> si c&rsquo;est quelque chose qui vous intéresse.</p>
<h3 id="reverse-proxy">Reverse Proxy</h3>
<p>Disons que vous avez une application qui fonctionne sur le port 9999 et que vous voulez faire un reverse proxy vers 443 (HTTPS). Le fichier de configuration ressemblerait à ceci :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">demo.app.com</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">reverse_proxy</span> <span class="err">127.0.0.1:9999</span>
</span></span><span class="line"><span class="cl">    <span class="err">encode</span> <span class="err">gzip</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Pour que Caddy recharge le <code>Caddyfile</code>, il suffit de lancer un <code>systemctl reload caddy</code>, Caddy rechargera alors le fichier de configuration, demandera un certificat pour <code>demo.app.com</code> et servira votre application sur HTTPS<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h3 id="fichiers-statiques">Fichiers statiques</h3>
<p>Ok un reverse proxy c&rsquo;est bien mais mon site web (celui-ci) est statique et généré par <a href="gohugo.io" rel="">Hugo</a>, comment pourrions-nous le servir en utilisant caddy ? Encore une fois, 4 lignes de configuration suffisent.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">demo.website.com</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">#</span> <span class="err">où</span> <span class="err">sont</span> <span class="err">stockés</span> <span class="err">nos</span> <span class="err">fichiers</span> <span class="err">statiques</span>
</span></span><span class="line"><span class="cl">    <span class="err">root</span> <span class="err">*</span> <span class="err">/var/www/demo.droapp.com/public</span>
</span></span><span class="line"><span class="cl">    <span class="err">file_server</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Un rapide <code>systemctl reload caddy</code> plus tard et Caddy sert vos fichiers statiques sur HTTPS<sup id="fnref1:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> à <code>demo.website.com</code>.</p>
<h3 id="php-fpm">PHP-fpm</h3>
<p>Vous utilisez habituellement Nginx comme façade/front pour PHP-fpm, mais Caddy peut aussi le faire. Et encore une fois avec un simple fichier de configuration.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">demo.website.com</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="err">#</span> <span class="err">où</span> <span class="err">sont</span> <span class="err">stockés</span> <span class="err">nos</span> <span class="err">fichiers</span>
</span></span><span class="line"><span class="cl">        <span class="err">root</span> <span class="err">*</span> <span class="err">/var/www/demo.website.com</span>
</span></span><span class="line"><span class="cl">        <span class="err">#</span> <span class="err">on</span> <span class="err">indique</span> <span class="err">à</span> <span class="err">caddy</span> <span class="err">où</span> <span class="err">trouver</span> <span class="err">le</span> <span class="err">socket</span> <span class="err">php-fpm</span>
</span></span><span class="line"><span class="cl">	    <span class="err">php_fastcgi</span> <span class="err">/run/php/php8.2-fpm.sock</span>	
</span></span><span class="line"><span class="cl">        <span class="err">file_server</span>
</span></span><span class="line"><span class="cl">        <span class="err">encode</span> <span class="err">gzip</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Encore un rapide <code>systemctl reload caddy</code> et nous sommes maintenant en face d&rsquo;une application php sur HTTPS<sup id="fnref2:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="bonus">Bonus</h2>
<h3 id="docker--docker-compose">Docker &amp; Docker Compose</h3>
<p>Caddy est aussi souvent exécuté avec Docker Compose et est toujours aussi simple. Voici un simple <code>docker-compose.yml</code> et nous pouvons utiliser n&rsquo;importe quel exemple de <code>Caddyfile</code> ci-dessus.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.7&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">caddy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">caddy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;443:443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;443:443/udp&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$PWD/Caddyfile:/etc/caddy/Caddyfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$PWD/caddy_data:/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$PWD/caddy_config:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$PWD/site:/srv</span><span class="w"> </span><span class="c"># Si nous voulons servir des fichiers statiques dans $PWD/site</span><span class="w">
</span></span></span></code></pre></div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>Documentation<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Caddy possède l&rsquo;une des meilleures <a href="https://caddyserver.com/docs/" target="_blank" rel="noopener noreffer ">documentation</a> que j&rsquo;aie vues depuis longtemps. Il existe de nombreuses autres fonctions que je n&rsquo;ai pas abordées ici.</div>
        </div>
    </div>
<p>Sur ce, je pense avoir couvert les bases de l&rsquo;utilisation de Caddy. L&rsquo;utilisez-vous ? Dites-moi comment et ce que vous en pensez.</p>
<figure>
</figure>

<p><em>Feature Photo originale de Valery Sysoev sur <a href="https://unsplash.com/@valerysysoev?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener noreffer ">Unsplash</a>.</em></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Caddy ne réussira à demander un certificat que si les ports 80 et 443 sont ouverts sur votre serveur. Vous pouvez également <a href="https://caddyserver.com/docs/automatic-https#activation" target="_blank" rel="noopener noreffer ">désactiver la demande de certificat</a> si vous n&rsquo;en avez pas besoin. D&rsquo;autres <a href="https://caddyserver.com/docs/automatic-https" target="_blank" rel="noopener noreffer ">options</a> comme le HTTPS local peuvent également être utilisées.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></description></item></channel></rss>